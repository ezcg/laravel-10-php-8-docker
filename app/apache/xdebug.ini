;zend_extension=xdebug.so
zend_extension=/usr/lib/php/20210902/xdebug.so

;https://xdebug.org/docs/upgrade_guide

;xdebug.profiler_output_dir=/tmp/profiler/

; normally, Xdebug only starts when you set GET/POST/COOKIE variable,
; however, if you set remote_autostart to '1' Xdebug starts a debugging session on every script call
;xdebug.remote_autostart=1
xdebug.start_with_request

; remote_connect_back enabled lets any device connect to xdebug that has access to server
xdebug.remote_connect_back=1
; remote_host is ignored if remote_connect_back is enabled
; In addition to being able to access the guest, the guest itself is able to access the host machine. This is very useful if the host itself is running services that may be useful for the guest machine. The IP address of the host is always the same IP address but with the final octet as a 1. In the preceding example, the host machine would have the IP address 192.168.33.1
;debug.remote_host=192.168.1.2
;xdebug.remote_host=10.0.2.15
xdebug.remote_host=192.168.0.160
;xdebug.remote_host=localhost
;xdebug.remote_host=laravel

; debugger protocol, Note: Xdebug 2.1 and later only support 'dbgp' as protocol
xdebug.remote_handler=dbgp

; Selects when a debug connection is initiated.
; req - Xdebug will try to connect to the debug client as soon as the script starts.
xdebug.remote_mode=req

; The port to which Xdebug tries to connect on the remote host (aka ide).
xdebug.remote_port=9003
;xdebug.remote_port=9229
xdebug.idekey=php-xdebug
output_buffering=off
xdebug.remote_log="/tmp/xdebug.log"


; Xdebug replaces PHP's standard var_dump() function with its own version, as long as the xdebug.overload_var_dump setting is not set to 0
xdebug.overload_var_dump=0;

xdebug.discover_client_host=1;
xdebug.mode=develop,debug;
